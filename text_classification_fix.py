# -*- coding: utf-8 -*-
"""Text_Classification_Fix.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zJiTBjBys8RFVaGyrsbVN6FwFeXk19A5

# NLP Sentiment Analysis
"""

# Import Library
import pandas as pd
from sklearn.model_selection import train_test_split
import tensorflow as tf
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
import nltk
nltk.download('punkt')

"""## Import Dataset"""

# Import dataset
data = 'ecommerceDataset.csv'
df = pd.read_csv(data)

df.head()

"""## Data Cleaning and EDA"""

df.rename(columns = {'Household':'category'}, inplace = True)

df.head()

df.rename(columns= {'Paper Plane Design Framed Wall Hanging Motivational Office Decor Art Prints (8.7 X 8.7 inch) - Set of 4 Painting made up in synthetic frame with uv textured print which gives multi effects and attracts towards it. This is an special series of paintings which makes your wall very beautiful and gives a royal touch. This painting is ready to hang, you would be proud to possess this unique painting that is a niche apart. We use only the most modern and efficient printing technology on our prints, with only the and inks and precision epson, roland and hp printers. This innovative hd printing technique results in durable and spectacular looking prints of the highest that last a lifetime. We print solely with top-notch 100% inks, to achieve brilliant and true colours. Due to their high level of uv resistance, our prints retain their beautiful colours for many years. Add colour and style to your living space with this digitally printed painting. Some are for pleasure and some for eternal bliss.so bring home this elegant print that is lushed with rich colors that makes it nothing but sheer elegance to be to your friends and family.it would be treasured forever by whoever your lucky recipient is. Liven up your place with these intriguing paintings that are high definition hd graphic digital prints for home, office or any room.' : 'Text Description'}, inplace = True)

df.tail()

df.isnull().sum()

"""## Preprocessing"""

df_copy = df.copy()

category = pd.get_dummies(df.category)
df_baru = pd.concat([df, category], axis=1)
df_baru = df_baru.drop(columns='category')
df_baru

df_baru.columns

"""## Modelling"""

desc = df_baru['Text Description'].values
label = df_baru[['Books', 'Clothing & Accessories', 'Electronics',
       'Household']].values

import re
from nltk.tokenize import word_tokenize


def remove_numbers(text):
    if isinstance(text, str):
        words = word_tokenize(text)
        words_without_numbers = [word for word in words if not re.match(r'\d', word)]
        cleaned_text = ' '.join(words_without_numbers)
        return cleaned_text
    else:
        return str(text)

import numpy as np

remove_numbers_vectorized = np.vectorize(remove_numbers)
desc = remove_numbers_vectorized(desc)

# Display the modified NumPy array
print(desc)

desc_latih, desc_test, label_latih, label_test = train_test_split(desc, label, test_size=0.2)

tokenizer = Tokenizer(num_words=5000, oov_token='oov')
tokenizer.fit_on_texts(desc_latih)
tokenizer.fit_on_texts(desc_test)

# mengurutkan kalimat untuk di tokenizer
sekuens_latih = tokenizer.texts_to_sequences(desc_latih)
sekuens_test = tokenizer.texts_to_sequences(desc_test)

 # memastikan setiap tokenizer memiliki panjang yang sama
padded_latih = pad_sequences(sekuens_latih, truncating='post')
padded_test = pad_sequences(sekuens_test, truncating='post')

from tensorflow.keras.optimizers import Adam

model = tf.keras.Sequential([
    tf.keras.layers.Embedding(input_dim=5000, output_dim=20),
    tf.keras.layers.LSTM(64),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dropout(0.25),
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.Dropout(0.25),
    tf.keras.layers.Dense(4, activation='softmax')
])
model.compile(loss='categorical_crossentropy',optimizer=Adam(learning_rate=0.001),metrics=['accuracy'])

print(model.summary())

from tensorflow.keras.callbacks import EarlyStopping

early_stopping = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)

history = model.fit(
    padded_latih,
    label_latih,
    epochs=20,
    batch_size=32,
    steps_per_epoch=50,
    validation_data=(padded_test, label_test),
    validation_steps=5,
    callbacks=[early_stopping],
    verbose=1
)

import matplotlib.pyplot as plt

# Plot training and validation loss
plt.figure(figsize=(12, 8))

plt.subplot(1, 2, 1)
plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.title('Training and Validation Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()

# Plot training and validation accuracy
plt.subplot(1, 2, 2)
plt.plot(history.history['accuracy'], label='Training Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.title('Training and Validation Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend()

plt.tight_layout()
plt.show()